package com.nalexand.swingy.ui.gui.forms;

import com.nalexand.swingy.controller.GameProcessController;
import com.nalexand.swingy.model.Hero;
import com.nalexand.swingy.model.ModelFacade;
import com.nalexand.swingy.ui.gui.utils.IconProvider;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class GameProcessForm implements KeyListener {
    private JPanel panel;
    private JPanel menu;
    private JLabel heroIcon;
    private JPanel map;
    private JLabel levelLabel;
    private JLabel xpLabel;
    private JLabel hpLabel;
    private JLabel attackLabel;
    private JLabel defenceLabel;

    private GameProcessController controller;

    public GameProcessForm(ModelFacade model, GameProcessController controller) {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();

        this.controller = controller;

        panel.addKeyListener(this);

        Hero hero = model.getSelectedHero();

        //region Draw menu
        ((TitledBorder) menu.getBorder()).setTitle(hero.name);
        heroIcon.setIcon(IconProvider.getHeroIcon(hero));
        levelLabel.setText(levelLabel.getText() + " " + hero.getLevel());
        xpLabel.setText(xpLabel.getText() + hero.getXp());
        hpLabel.setText(hpLabel.getText() + String.format("%d/%d", hero.currentHitPoints, hero.getHitPoints()));
        attackLabel.setText(attackLabel.getText() + hero.getAttack());
        defenceLabel.setText(defenceLabel.getText() + hero.getDefence());
        //endregion

        //region Draw map

        //endregion

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new BorderLayout(0, 0));
        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(16, 16, 16, 16), null));
        menu = new JPanel();
        menu.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(menu, BorderLayout.WEST);
        menu.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), "<Hero name>", TitledBorder.CENTER, TitledBorder.BELOW_TOP, this.$$$getFont$$$(null, -1, -1, menu.getFont())));
        heroIcon = new JLabel();
        heroIcon.setHorizontalAlignment(2);
        heroIcon.setIcon(new ImageIcon(getClass().getResource("/traxex.png")));
        heroIcon.setInheritsPopupMenu(false);
        heroIcon.setText("");
        heroIcon.setVerticalAlignment(1);
        heroIcon.setVerticalTextPosition(3);
        menu.add(heroIcon, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        levelLabel = new JLabel();
        levelLabel.setText("Level: ");
        menu.add(levelLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        menu.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        xpLabel = new JLabel();
        xpLabel.setText("XP: ");
        menu.add(xpLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        hpLabel = new JLabel();
        hpLabel.setText("HP: ");
        menu.add(hpLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        attackLabel = new JLabel();
        attackLabel.setText("Attack: ");
        menu.add(attackLabel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        defenceLabel = new JLabel();
        defenceLabel.setText("Defence: ");
        menu.add(defenceLabel, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        map = new JPanel();
        map.setLayout(new GridBagLayout());
        panel.add(map, BorderLayout.CENTER);
        map.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), "Map", TitledBorder.CENTER, TitledBorder.BELOW_TOP));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_W:
                controller.moveHero(0, -1);
                break;
            case KeyEvent.VK_A:
                controller.moveHero(-1, 0);
                break;
            case KeyEvent.VK_S:
                controller.moveHero(0, 1);
                break;
            case KeyEvent.VK_D:
                controller.moveHero(1, 0);
                break;
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
        /* do nothing */
    }

    @Override
    public void keyPressed(KeyEvent e) {
        /* do nothing */
    }
}
