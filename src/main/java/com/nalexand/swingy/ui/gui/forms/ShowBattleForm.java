package com.nalexand.swingy.ui.gui.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.nalexand.swingy.controller.BattleController;
import com.nalexand.swingy.model.Battle;
import com.nalexand.swingy.model.Hero;
import com.nalexand.swingy.model.ModelFacade;
import com.nalexand.swingy.ui.base.Form;
import com.nalexand.swingy.ui.gui.utils.IconResolver;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.List;

;

public class ShowBattleForm implements Form {

    private JLabel hero;
    private JLabel mob;
    private JLabel title;
    private JPanel panel;
    private JButton okButton;
    private JPanel battleResult;
    private JPanel content;

    public ShowBattleForm(ModelFacade model, BattleController controller) {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();

        Hero selectedHero = model.getSelectedHero();
        Battle battle = model.getBattle();
        IconResolver.setIcon(hero, selectedHero.iconSource);
        hero.setText("HP: " + selectedHero.hitPoints);
        IconResolver.setIcon(mob, battle.mob.iconSource);
        mob.setText("HP: " + battle.mob.hitPoints);

        List<Battle.Step> steps = battle.getSteps();

        battleResult.setLayout(new GridLayoutManager(steps.size() + 1, 5, new Insets(0, 0, 0, 0), -1, -1));

        addCell("Step", 0, 0);
        addCell("HP", 0, 1);
        addCell("Damage", 0, 2);
        addCell("Damage", 0, 3);
        addCell("HP", 0, 4);
        int row = 1;
        for (Battle.Step step : steps) {
            addCell(Integer.toString(step.number), row, 0);
            addCell(Integer.toString(step.heroHp), row, 1);
            addCell(Integer.toString(step.heroDamage), row, 2);
            addCell(Integer.toString(step.mobDamage), row, 3);
            addCell(Integer.toString(step.mobHp), row, 4);
            row++;
        }
        okButton.addActionListener(e -> controller.accept());
    }

    private void addCell(String text, int row, int column) {
        JLabel cell = new JLabel(text);
        cell.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        cell.setHorizontalAlignment(SwingConstants.CENTER);
        cell.setHorizontalTextPosition(SwingConstants.CENTER);
        battleResult.add(
                cell,
                new GridConstraints(row, column, 1, 1,
                        GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_BOTH,
                        GridConstraints.SIZEPOLICY_FIXED,
                        GridConstraints.SIZEPOLICY_FIXED,
                        null,
                        new Dimension(100, 32),
                        null,
                        0,
                        false)
        );
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        content = new JPanel();
        content.setLayout(new GridLayoutManager(4, 3, new Insets(16, 16, 16, 16), -1, -1));
        panel.add(content, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        content.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), "Battle", TitledBorder.CENTER, TitledBorder.BELOW_TOP, null, new Color(-4473925)));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        content.add(panel1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        title = new JLabel();
        title.setText("");
        panel1.add(title, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        content.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        hero = new JLabel();
        hero.setHorizontalAlignment(0);
        hero.setText("");
        panel2.add(hero, BorderLayout.CENTER);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        content.add(panel3, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mob = new JLabel();
        mob.setText("");
        panel3.add(mob, BorderLayout.CENTER);
        battleResult = new JPanel();
        battleResult.setLayout(new GridBagLayout());
        content.add(battleResult, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        battleResult.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-4473925)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        okButton = new JButton();
        okButton.setText("ok");
        content.add(okButton, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    @Override
    public JComponent getRootComponent() {
        return panel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
